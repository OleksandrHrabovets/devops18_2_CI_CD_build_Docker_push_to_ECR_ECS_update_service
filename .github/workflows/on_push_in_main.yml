name: Build Docker, push to ECR, ECS update-service
on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build Docker image
        id: build
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_TAG }} .

      - name: Tag Docker image
        id: tag
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_TAG }} ${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_TAG }}

      - name: Push Docker image to AWS ECR
        id: push
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_TAG }}

      - name: Collect status
        id: collect_status
        run: |
          echo "BUID_STATUS=$([[ '${{ steps.build.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV        
          echo "TAG_STATUS=$([[ '${{ steps.tag.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV        
          echo "PUSH_STATUS=$([[ '${{ steps.push.outcome }}' == 'success' ]] && echo '✅ Success' || echo '❌ Failed')" >> $GITHUB_ENV

      - name: Send Telegram Notification
        if: always()
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            *GitHab Actions CI Results*:
            *Step name*: Build Docker image: *Status*: ${{ env.BUID_STATUS }}
            *Step name*: Tag Docker image: *Status*: ${{ env.TAG_STATUS }}
            *Step name*: Push Docker image to AWS ECR: *Status*: ${{ env.PUSH_STATUS }}
